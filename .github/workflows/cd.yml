# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Continuous Deployment

on:
  workflow_dispatch: 
    branches:
      - main
  push:
    branches:
      - feat/ci-cd

env:
  PROJECT_ID: hypheni-gcp-370616
  SERVICE: spring-bpcalc
  REGION: europe-west4
  APP_URL: https://spring-bpcalc-lxwpse7yja-ez.a.run.app

jobs:
  # deploy:
  #   permissions:
  #     contents: 'read'
  #     id-token: 'write'

  #   runs-on: ubuntu-22.04

  #   steps:
  #   - name: Set up Java 17
  #     uses: actions/setup-java@v3
  #     with:
  #       java-version: '17'
  #       distribution: 'temurin'

  #   - name: Set up maven cache
  #     uses: actions/cache@v2
  #     with:
  #       path: ~/.m2
  #       key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
  #       restore-keys: ${{ runner.os }}-m2

  #   - name: Git code checkout
  #     uses: actions/checkout@v3

  #   - name: Google Auth
  #     uses: google-github-actions/auth@v1
  #     with:
  #       credentials_json: ${{ secrets.GOOGLE_CREDENTIALS }}

  #   - name: Build container
  #     run: | 
  #       mvn -B compile jib:build \
  #       -Djib.to.image="gcr.io/${{ env.PROJECT_ID }}/${{ env.SERVICE }}:${{ github.sha }}"

  #   - name: Deploy to Cloud Run
  #     id: deploy
  #     uses: google-github-actions/deploy-cloudrun@v1
  #     with:
  #       service: ${{ env.SERVICE }}
  #       region: ${{ env.REGION }}
  #       image: gcr.io/${{ env.PROJECT_ID }}/${{ env.SERVICE }}:${{ github.sha }}
  #       flags: '--allow-unauthenticated'

  #   - name: Show output
  #     run: echo "${{ steps.deploy.outputs.url }}"

  test:
    # needs: deploy
    timeout-minutes: 60
    runs-on: ubuntu-22.04
    
    steps:
    - uses: actions/checkout@v3
    - uses: actions/setup-node@v3
      with:
        node-version: 16

    - name: Cache node modules
      id: cache-nodemodules
      uses: actions/cache@v2
      env:
        cache-name: cache-node-modules
      with:
        path: node_modules
        key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-build-${{ env.cache-name }}-
          ${{ runner.os }}-build-
          ${{ runner.os }}-

    - name: Install dependencies
      run: npm ci; npx playwright install --with-deps

    - name: Run Playwright tests
      run: npx playwright test tests/e2e.spec.ts

    - name: Pull K6 docker image
      run: docker pull loadimpact/k6

    - name: Run K6 load test
      run: docker run -i loadimpact/k6 run - <tests/perf.test.js > k6report.txt

    - name: Pull ZAP docker image
      run: docker pull owasp/zap2docker-weekly
    
    - name: Run ZAP penetration test
      run: docker run -v /tmp:/zap/wrk/:rw --user root -t owasp/zap2docker-weekly zap-baseline.py -t ${{env.APP_URL}} -I -r zapreport.html
  
    - name: Aggregating reports
      run: |
        mkdir -p ${{github.workspace}}/reports
        mv ${{github.workspace}}/playwright-report/index.html ${{github.workspace}}/reports/e2e-test-report.html
        mv ${{github.workspace}}/k6report.txt ${{github.workspace}}/reports/load-test-report.txt
        sudo mv /tmp/zapreport.html ${{github.workspace}}/reports/pen-test-report.html

    - name: Uploading reports
      uses: actions/upload-artifact@v3
      with:
        name: cd-test-reports
        path: ${{github.workspace}}/reports/*
